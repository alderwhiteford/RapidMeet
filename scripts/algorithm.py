# Variables: 
timeZone = 'Eastern Time Zone'
length_of_meeting = 1
availability = {
    "1705438800000": [
        67281766,
        1552664273,
        -1930279294
    ],
    "1705519800000": [
        63345638,
        67281766,
        1552664273,
        -1930279294
    ],
    "1705505400000": [
        63345638,
        -1930279294,
        65190183
    ],
    "1705512600000": [
        63345638,
        67281766,
        -1930279294,
        65190183
    ],
    "1705532400000": [
        1552664273,
        65190183
    ],
    "1705446000000": [
        67281766
    ],
    "1705357800000": [
        1552664273
    ],
    "1705343400000": [
        63345638,
        1552664273,
        -1930279294,
        65190183
    ],
    "1705440600000": [
        67281766,
        -1930279294
    ],
    "1705518000000": [
        63345638,
        67281766,
        1552664273,
        -1930279294,
        65190183
    ],
    "1705593600000": [
        63345638
    ],
    "1705431600000": [
        1552664273,
        -1930279294,
        65190183
    ],
    "1705606200000": [
        67281766,
        1552664273,
        -1930279294,
        65190183
    ],
    "1705359600000": [
        1552664273
    ],
    "1705334400000": [
        63345638,
        67281766,
        -1930279294
    ],
    "1705437000000": [
        67281766,
        1552664273,
        -1930279294
    ],
    "1705516200000": [
        63345638,
        67281766,
        -1930279294
    ],
    "1705444200000": [
        67281766,
        -1930279294
    ],
    "1705602600000": [
        63345638,
        67281766,
        1552664273,
        -1930279294,
        65190183
    ],
    "1705426200000": [
        1552664273,
        -1930279294,
        65190183
    ],
    "1705509000000": [
        63345638,
        67281766,
        -1930279294
    ],
    "1705591800000": [
        63345638
    ],
    "1705356000000": [
        1552664273
    ],
    "1705429800000": [
        1552664273,
        -1930279294,
        65190183
    ],
    "1705613400000": [
        67281766,
        -1930279294
    ],
    "1705338000000": [
        63345638,
        67281766,
        -1930279294,
        65190183
    ],
    "1705345200000": [
        63345638,
        1552664273,
        -1930279294
    ],
    "1705611600000": [
        67281766,
        1552664273,
        -1930279294,
        65190183
    ],
    "1705525200000": [
        1552664273,
        65190183
    ],
    "1705514400000": [
        63345638,
        67281766,
        -1930279294
    ],
    "1705615200000": [
        67281766,
        -1930279294
    ],
    "1705330800000": [
        63345638,
        -1930279294
    ],
    "1705523400000": [
        1552664273,
        65190183
    ],
    "1705507200000": [
        63345638,
        -1930279294
    ],
    "1705510800000": [
        63345638,
        67281766,
        -1930279294
    ],
    "1705424400000": [
        -1930279294,
        65190183
    ],
    "1705433400000": [
        67281766,
        1552664273,
        -1930279294,
        65190183
    ],
    "1705336200000": [
        63345638,
        67281766,
        -1930279294,
        65190183
    ],
    "1705352400000": [
        1552664273
    ],
    "1705527000000": [
        1552664273,
        65190183
    ],
    "1705600800000": [
        63345638,
        67281766,
        1552664273,
        -1930279294,
        65190183
    ],
    "1705521600000": [
        63345638,
        1552664273
    ],
    "1705361400000": [
        1552664273
    ],
    "1705530600000": [
        1552664273,
        65190183
    ],
    "1705609800000": [
        67281766,
        1552664273,
        -1930279294,
        65190183
    ],
    "1705503600000": [
        63345638,
        -1930279294,
        65190183
    ],
    "1705339800000": [
        63345638,
        -1930279294,
        65190183
    ],
    "1705422600000": [
        65190183
    ],
    "1705595400000": [
        63345638
    ],
    "1705608000000": [
        67281766,
        1552664273,
        -1930279294,
        65190183
    ],
    "1705354200000": [
        1552664273
    ],
    "1705347000000": [
        63345638,
        1552664273,
        -1930279294
    ],
    "1705350600000": [
        1552664273
    ],
    "1705604400000": [
        67281766,
        1552664273,
        -1930279294,
        65190183
    ],
    "1705597200000": [
        63345638,
        -1930279294
    ],
    "1705332600000": [
        63345638,
        67281766,
        -1930279294
    ],
    "1705599000000": [
        63345638,
        67281766,
        -1930279294,
        65190183
    ],
    "1705442400000": [
        67281766,
        -1930279294
    ],
    "1705435200000": [
        67281766,
        1552664273,
        -1930279294,
        65190183
    ],
    "1705348800000": [
        1552664273
    ],
    "1705617000000": [
        67281766,
        -1930279294
    ],
    "1705341600000": [
        63345638,
        -1930279294,
        65190183
    ],
    "1705528800000": [
        1552664273,
        65190183
    ],
    "1705428000000": [
        1552664273,
        -1930279294,
        65190183
    ],
    "1705420800000": [
        65190183
    ],
    "1705496400000": [
        65190183
    ],
    "1705498200000": [
        65190183
    ],
    "1705500000000": [
        65190183
    ],
    "1705501800000": [
        65190183
    ],
    "1705534200000": [
        65190183
    ]
}

def convertToDates(availability):
    # Instantiate the dates array to be the length of the number of days:

    # Iterate over the availability and add to the date array of days -> times
    # - { day: [...epochTimes], day: [...epochTimes], ...] }
    # Get the keys of the object, and sort. Use this to iterate through days:
    
    # Sort the array using the first element in each 








# Alder's Brain Dump

# N - Number of availability times
# U - Number of users

# Interate across all times in a day:
# - # Identify the starting availability of each user (for each segment) - O(N * U)
#       * First time seeing a user mark the segment and set as seen
#       * No longer seeing a user, mark them as missing
#       * If you see the user again mark the segement and set as seen again
#
# - # For each starting segment extend out by total length of meeting and tally points (count number of people available) - O(U * N / 2)
#       * start with 1 point if you are there at the start of the meeting
#       * start with 0.8 points if you are in the next 30 minutes (30 min in)
#       * start with 0.65 points if you are in the next 30 minutes (1 hours in)
#       * start with 0.55 points if you are in the next 30 minutes  (1.5 hours in)
#       * start with 0.45 points if you are in the next 30 minutes (2 hours in)
#       * start with 0.40 points if you are in the next 30 minutes (2.5 hours in)
#       * start with 0.35 points if you are in the next 30 minutes (3 hours in)
#       * start with 0.31 points if you are in the next 30 minutes (3.5 hours in)
#       * start with 0.27 points if you are in the next 30 minutes (4 hours in)
#       * start with 0.23 points if you are in the next 30 minutes (4.5 hours in)
#
#       * For each time there after increment their score by (x + (x * 1.1))
#       * Tally up the score for that segment:

# Run the algorithm for each user segment: 
# OPT(i) = max(OPT(i), OPT(i-1))





